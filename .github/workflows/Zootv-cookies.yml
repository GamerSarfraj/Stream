name: Update JioTV Cookies

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update-cookies:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tenacity

      - name: Update cookies in Zootv.json
        id: update
        run: |
          python - <<EOF
          import requests
          import json
          import re
          import os
          from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

          m3u_url = "https://raw.githubusercontent.com/alex8875/m3u/refs/heads/main/jstar.m3u"

          @retry(
              stop=stop_after_attempt(3),
              wait=wait_exponential(multiplier=1, min=4, max=10),
              retry=retry_if_exception_type(requests.RequestException)
          )
          def fetch_m3u():
              response = requests.get(m3u_url, timeout=10)
              response.raise_for_status()
              return response.text

          try:
              m3u_content = fetch_m3u()
          except requests.RequestException as e:
              print(f"Error fetching m3u file after retries: {e}")
              exit(1)

          cookie_pattern = r'__hdnea__=[^\s"\n;),]+'
          cookie_match = re.search(cookie_pattern, m3u_content)
          if not cookie_match:
              fallback_pattern = r'__hdnea__=[^"\n;]+'
              cookie_match = re.search(fallback_pattern, m3u_content)
              if not cookie_match:
                  print("Error: No __hdnea__ cookie found in the m3u file")
                  exit(1)
          new_cookie = cookie_match.group(0).rstrip(';').strip()
          print(f"Extracted cookie: {new_cookie}")

          json_file = "Zootv.json"
          if not os.path.exists(json_file):
              print(f"Error: {json_file} not found in repository root")
              exit(1)

          try:
              with open(json_file, 'a') as f:
                  pass
          except Exception as e:
              print(f"Error: {json_file} is not writable: {e}")
              exit(1)

          try:
              with open(json_file, 'r') as f:
                  file_content = f.read()
                  if not file_content.strip():
                      print(f"Error: {json_file} is empty")
                      exit(1)
                  data = json.loads(file_content)
          except json.JSONDecodeError as e:
              print(f"Error: Invalid JSON in {json_file}: {e}")
              exit(1)
          except Exception as e:
              print(f"Error reading {json_file}: {e}")
              exit(1)

          updated = False
          if isinstance(data, list):
              for index, item in enumerate(data):
                  if not isinstance(item, dict):
                      print(f"Warning: Item at index {index} is not a dictionary, skipping")
                      continue
                  if "cookie" not in item or item["cookie"] != new_cookie:
                      old_cookie = item.get("cookie", "none")
                      item["cookie"] = new_cookie
                      updated = True
                      print(f"Updated/Added cookie for {item.get('name', 'unknown')} (index {index}): {old_cookie} -> {new_cookie}")
          elif isinstance(data, dict):
              if "cookie" not in data or data["cookie"] != new_cookie:
                  old_cookie = data.get("cookie", "none")
                  data["cookie"] = new_cookie
                  updated = True
                  print(f"Updated/Added cookie: {old_cookie} -> {new_cookie}")
          else:
              print("Error: Zootv.json is neither a list nor a dictionary")
              exit(1)

          if not updated:
              print("No changes needed in Zootv.json")
              echo "updated=false" >> $GITHUB_OUTPUT
              exit(0)

          try:
              with open(json_file, 'w') as f:
                  json.dump(data, f, indent=2)
                  f.write('\n')
              print(f"Successfully updated {json_file}")
              echo "updated=true" >> $GITHUB_OUTPUT
          except Exception as e:
              print(f"Error writing to {json_file}: {e}")
              exit(1)
          EOF

      - name: Commit and push changes
        if: steps.update.outputs.updated == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Zootv.json
          git commit -m "Update cookies in Zootv.json (Run: $(date -u '+%Y-%m-%d %H:%M:%S UTC'))"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
