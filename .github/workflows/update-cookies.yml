name: Update JioTV Playlist Cookies

on:
  schedule:
    - cron: '0 */6 * * *' # हर 6 घंटे में
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update cookies in Jiotv.json
        run: |
          python -c '
          import json
          import requests
          from urllib.parse import urlparse, parse_qs
          import os
          import sys

          # Configuration
          API_URL = "https://jo-json.vodep39240327.workers.dev"
          PLAYLIST_FILE = "Jiotv.json"

          def extract_hdnea_from_url(url):
              try:
                  parsed = urlparse(url)
                  query = parse_qs(parsed.query)
                  cookie = query.get("__hdnea__", [None])[0]
                  return f"__hdnea__={cookie}" if cookie else None
              except Exception as e:
                  print(f"Error parsing URL: {e}")
                  return None

          def fetch_single_cookie():
              try:
                  print(f"Fetching data from {API_URL}")
                  response = requests.get(API_URL, timeout=15)
                  response.raise_for_status()
                  data = response.json()
                  print(f"Fetched {len(data)} channels from API")

                  for channel_id, info in data.items():
                      if isinstance(info, dict) and "url" in info:
                          cookie = extract_hdnea_from_url(info["url"])
                          if cookie:
                              print(f"Found valid cookie from channel ID {channel_id}")
                              return cookie
                  print("No valid __hdnea__ cookie found in any channel")
                  return None
              except Exception as e:
                  print(f"Failed to fetch cookie: {e}")
                  return None

          def update_playlist_cookies():
              if not os.path.exists(PLAYLIST_FILE):
                  print(f"Error: {PLAYLIST_FILE} not found!")
                  sys.exit(1)

              try:
                  with open(PLAYLIST_FILE, "r", encoding="utf-8") as f:
                      playlist = json.load(f)
                  print(f"Loaded {len(playlist)} channels from {PLAYLIST_FILE}")
              except Exception as e:
                  print(f"Error reading {PLAYLIST_FILE}: {e}")
                  sys.exit(1)

              new_cookie = fetch_single_cookie()
              if not new_cookie:
                  print("No new cookie retrieved. Exiting without changes.")
                  sys.exit(0)  # No error, just no update

              updated = False
              for channel in playlist:
                  old_cookie = channel.get("cookie")
                  if old_cookie != new_cookie:
                      channel["cookie"] = new_cookie
                      updated = True
                      print(f"Updated: {channel.get('name', 'Unknown')} → {new_cookie[:50]}...")

              if updated:
                  try:
                      with open(PLAYLIST_FILE, "w", encoding="utf-8") as f:
                          json.dump(playlist, f, indent=2, ensure_ascii=False)
                      print(f"Successfully updated {PLAYLIST_FILE} with new cookie")
                  except Exception as e:
                      print(f"Error writing file: {e}")
                      sys.exit(1)
              else:
                  print("Cookie is same as before. No changes made.")
              # No force write – only save if changed

          if __name__ == "__main__":
              update_playlist_cookies()
          '

      - name: Commit and push if cookie updated
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add Jiotv.json

          if git diff --staged --quiet; then
            echo "No changes in Jiotv.json → Skipping commit"
            exit 6  # No changes
          else
            git commit -m "Auto-update: Refreshed __hdnea__ cookie for all channels"
            git push
            echo "Cookie updated and pushed successfully"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
