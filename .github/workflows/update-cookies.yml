name: Update JioTV Playlist Cookies

on:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Important for rebase

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install requests
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update cookies in Jiotv.json
        id: update
        run: |
          python -c '
          import json, requests, os
          from urllib.parse import urlparse, parse_qs

          API_URL = "https://jo-json.vodep39240327.workers.dev"
          FILE = "Jiotv.json"

          def get_cookie():
              try:
                  data = requests.get(API_URL, timeout=15).json()
                  for info in data.values():
                      if isinstance(info, dict) and "url" in info:
                          q = parse_qs(urlparse(info["url"]).query)
                          if "__hdnea__" in q:
                              return f"__hdnea__={q[\"__hdnea__\"][0]}"
              except:
                  pass
              return None

          if not os.path.exists(FILE):
              print(f"Error: {FILE} not found")
              exit(1)

          with open(FILE, "r") as f:
              playlist = json.load(f)

          new_cookie = get_cookie()
          if not new_cookie:
              print("No cookie from API")
              exit(1)

          updated = False
          for ch in playlist:
              if ch.get("cookie") != new_cookie:
                  ch["cookie"] = new_cookie
                  updated = True

          with open(FILE, "w") as f:
              json.dump(playlist, f, indent=2)

          print(f"Cookie updated: {updated}")
          print(f"::set-output name=updated::{str(updated).lower()}")
          '

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

      - name: Commit & Push (Only if Updated)
        if: steps.update.outputs.updated == 'true'
        run: |
          git add Jiotv.json

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Update __hdnea__ cookie in Jiotv.json"

          # Pull with rebase (safe)
          git pull --rebase origin main || {
            echo "Rebase failed, forcing push (CI safe)"
            git push origin main --force-with-lease
            exit 0
          }

          # Push normally after rebase
          git push origin main --force-with-lease

          echo "Successfully pushed update"

      - name: No Update Needed
        if: steps.update.outputs.updated != 'true'
        run: |
          echo "No new cookie. Skipping commit."
