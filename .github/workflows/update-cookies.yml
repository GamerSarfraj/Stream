name: Update JioTV Playlist Cookies

on:
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-cookies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update cookies in Jiotv.json
        run: |
          python -c '
          import json
          import requests
          from urllib.parse import urlparse, parse_qs
          import time
          import os

          # Configuration
          API_URL = "https://jo-json.vodep39240327.workers.dev"
          PLAYLIST_FILE = "Jiotv.json"

          def extract_hdnea_from_url(url):
              """Extract __hdnea__ cookie from MPD URL."""
              try:
                  parsed = urlparse(url)
                  query = parse_qs(parsed.query)
                  cookie = query.get("__hdnea__", [None])[0]
                  if cookie:
                      return f"__hdnea__={cookie}"
                  print(f"No __hdnea__ cookie found in URL: {url}")
                  return None
              except Exception as e:
                  print(f"Error parsing URL: {e}")
                  return None

          def fetch_single_cookie(max_retries=3, delay=5):
              """Fetch a single __hdnea__ cookie from the API with retries."""
              for attempt in range(max_retries):
                  try:
                      print(f"Attempt {attempt + 1}/{max_retries} - Fetching data from {API_URL}")
                      response = requests.get(API_URL, timeout=15)
                      response.raise_for_status()
                      data = response.json()
                      print(f"Fetched API data for {len(data)} channels")
                      for channel_id, info in data.items():
                          if isinstance(info, dict) and "url" in info:
                              cookie = extract_hdnea_from_url(info["url"])
                              if cookie:
                                  print(f"Using cookie from channel ID {channel_id}: {cookie}")
                                  return cookie
                      print("No valid cookies found in API response")
                      return None
                  except requests.RequestException as e:
                      print(f"Attempt {attempt + 1}/{max_retries} - Error fetching data from {API_URL}: {e}")
                      if attempt < max_retries - 1:
                          time.sleep(delay)
                      continue
                  except ValueError as e:
                      print(f"Error parsing JSON from {API_URL}: {e}")
                      return None
              print(f"Failed to fetch cookie after {max_retries} attempts")
              return None

          def update_playlist_cookies():
              # Check if playlist file exists
              if not os.path.exists(PLAYLIST_FILE):
                  print(f"Error: {PLAYLIST_FILE} not found in repository")
                  exit(1)

              try:
                  with open(PLAYLIST_FILE, "r") as file:
                      playlist = json.load(file)
                  print(f"Successfully loaded {PLAYLIST_FILE} with {len(playlist)} channels")
              except Exception as e:
                  print(f"Error reading {PLAYLIST_FILE}: {e}")
                  exit(1)

              new_cookie = fetch_single_cookie()
              if not new_cookie:
                  print("No valid cookie retrieved from API, exiting.")
                  exit(1)

              updated = False
              for channel in playlist:
                  channel_name = channel.get("name", "Unknown")
                  old_cookie = channel.get("cookie")
                  if new_cookie != old_cookie:
                      channel["cookie"] = new_cookie
                      updated = True
                      print(f"Updated cookie for {channel_name} to {new_cookie}")
                  else:
                      print(f"No update needed for {channel_name} (cookie unchanged)")

              if updated:
                  try:
                      with open(PLAYLIST_FILE, "w") as file:
                          json.dump(playlist, file, indent=2)
                      print(f"Successfully updated {PLAYLIST_FILE}")
                  except Exception as e:
                      print(f"Error writing to {PLAYLIST_FILE}: {e}")
                      exit(1)
              else:
                  print("No cookie updates required. No changes made to file.")
                  # Force write REMOVED â€” no unnecessary commit

          if __name__ == "__main__":
              update_playlist_cookies()
          '

      - name: Commit and push if cookie updated
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add Jiotv.json

          # Check if file actually changed after update
          if git diff --staged --quiet; then
            echo "No changes in Jiotv.json (cookie same), skipping commit"
            exit 0
          else
            git commit -m "Update __hdnea__ cookie for all channels in Jiotv.json from API"
            git push
            echo "Changes committed and pushed successfully"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
